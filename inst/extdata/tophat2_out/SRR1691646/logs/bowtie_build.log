Settings:
  Output files: "/data1/ali/analysis/zrsr2/mapping/SRR1691646//tmp/segment_juncs.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /data1/ali/analysis/zrsr2/mapping/SRR1691646//tmp/segment_juncs.fa
Reading reference sizes
  Time reading reference sizes: 00:00:01
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:02
bmax according to bmaxDivN setting: 9983286
Using parameters --bmax 7487465 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 7487465 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:01
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:01
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:04
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:03
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 5.70473e+06 (target: 7487464)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (7487465) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 5583198
  (Using difference cover)
  Sorting block time: 00:00:05
Returning block of 5583199
Getting block 2 of 7
  Reserving size (7487465) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 3759753
  (Using difference cover)
  Sorting block time: 00:00:03
Returning block of 3759754
Getting block 3 of 7
  Reserving size (7487465) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 6939473
  (Using difference cover)
  Sorting block time: 00:00:06
Returning block of 6939474
Getting block 4 of 7
  Reserving size (7487465) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 7073169
  (Using difference cover)
  Sorting block time: 00:00:06
Returning block of 7073170
Getting block 5 of 7
  Reserving size (7487465) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:02
  Sorting block of length 3646057
  (Using difference cover)
  Sorting block time: 00:00:03
Returning block of 3646058
Getting block 6 of 7
  Reserving size (7487465) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:02
  Sorting block of length 6403184
  (Using difference cover)
  Sorting block time: 00:00:05
Returning block of 6403185
Getting block 7 of 7
  Reserving size (7487465) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 6528304
  (Using difference cover)
  Sorting block time: 00:00:05
Returning block of 6528305
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 9487170
fchr[G]: 20019135
fchr[T]: 29971858
fchr[$]: 39933144
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 71110644 bytes to primary EBWT file: /data1/ali/analysis/zrsr2/mapping/SRR1691646//tmp/segment_juncs.1.bt2
Wrote 9983292 bytes to secondary EBWT file: /data1/ali/analysis/zrsr2/mapping/SRR1691646//tmp/segment_juncs.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 39933144
    bwtLen: 39933145
    sz: 9983286
    bwtSz: 9983287
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 2495822
    offsSz: 9983288
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 207986
    numLines: 207986
    ebwtTotLen: 13311104
    ebwtTotSz: 13311104
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:01:02
Reading reference sizes
  Time reading reference sizes: 00:00:01
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:02
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 9983286
Using parameters --bmax 7487465 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 7487465 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:02
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:01
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:04
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:03
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 5.70473e+06 (target: 7487464)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (7487465) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 6238372
  (Using difference cover)
  Sorting block time: 00:00:05
Returning block of 6238373
Getting block 2 of 7
  Reserving size (7487465) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 6003720
  (Using difference cover)
  Sorting block time: 00:00:05
Returning block of 6003721
Getting block 3 of 7
  Reserving size (7487465) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 5400044
  (Using difference cover)
  Sorting block time: 00:00:05
Returning block of 5400045
Getting block 4 of 7
  Reserving size (7487465) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:02
  Sorting block of length 7201313
  (Using difference cover)
  Sorting block time: 00:00:06
Returning block of 7201314
Getting block 5 of 7
  Reserving size (7487465) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 5506224
  (Using difference cover)
  Sorting block time: 00:00:05
Returning block of 5506225
Getting block 6 of 7
  Reserving size (7487465) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 4372923
  (Using difference cover)
  Sorting block time: 00:00:03
Returning block of 4372924
Getting block 7 of 7
  Reserving size (7487465) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:01
  Sorting block of length 5210542
  (Using difference cover)
  Sorting block time: 00:00:04
Returning block of 5210543
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 9487170
fchr[G]: 20019135
fchr[T]: 29971858
fchr[$]: 39933144
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 71110644 bytes to primary EBWT file: /data1/ali/analysis/zrsr2/mapping/SRR1691646//tmp/segment_juncs.rev.1.bt2
Wrote 9983292 bytes to secondary EBWT file: /data1/ali/analysis/zrsr2/mapping/SRR1691646//tmp/segment_juncs.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 39933144
    bwtLen: 39933145
    sz: 9983286
    bwtSz: 9983287
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 2495822
    offsSz: 9983288
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 207986
    numLines: 207986
    ebwtTotLen: 13311104
    ebwtTotSz: 13311104
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:01:02
